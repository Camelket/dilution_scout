//- design the page to feed CRUD ticker data into and generate charts, cards ect.
extends layout 

mixin filingTableRow(form, link, desc, filedOn)
        a.filingTableRow(href=link).cur-p
            div.filingTableItem.filingFormType #{form}
            div.filingTableItem.filingDescription #{desc}
            div.filingTableItem.filingFiledOn #{filedOn}

mixin offeringsContainer(offerings)
    div Offerings 
    if (offerings = []) 
        div - No Offerings Associated with this Shelf
    else 
        .registrationTableRow
            div Remaining Shelf Capacity:
            div 
        .registrationTableRow 
            div Registered and Active: 
            div
        .registrationTableRow 
            div Completed:
            div

mixin shelfRegistrationContainer(shelf)
    .shelfRegistrationContainer
        .registrationTableRow
            div Filing Date:
            a(href=shelf["filingLink"]["filing_link"]) #{shelf["filing_date"]}
        .registrationTableRow 
            div Filing Number: 
            div #{shelf["file_number"]}
        .registrationTableRow 
            div Total Capacity:  
            div #{shelf["capacity"]} $
        if (shelf["effectFiling"]!=undefined)
            .registrationTableRow 
                div Effect Date:  
                a(href=shelf["effectFiling"]["filing_html"]) #{shelf["effect_date"]}
        else 
            .registrationTableRow 
                div Effect Date:  
                div No Effect Filing Found for this Shelf
        .registrationTableRow 
            div Is this active: 
            div #{shelf["is_active"]}

mixin filingParseStatusContainer(filingStates)
    .filingParseStatusTableWrapper 
        .filingParseStatusTable
            .filingParseStatusTableRow 
                .filingParseStatusTableEntry Form
                .filingParseStatusTableEntry Parsed
                .filingParseStatusTableEntry Filed
            each entry in filingStates
                -let filing = entry["filing"]
                -let parseStatus = entry["parse_status"]
                if (filing != undefined)
                    .filingParseStatusTableRow
                        .filingParseStatusTableEntry 
                            a(href=filing["filing_html"]) #{filing["form_type"]}
                        if (parseStatus != undefined)
                            .filingParseStatusTableEntry #{parseStatus["date_parsed"]}
                        else 
                            .filingParseStatusTableEntry X
                        .filingParseStatusTableEntry #{filing["filing_date"]}
                        



mixin secuOutstanding(secusOutstanding)
    each key in Object.keys(secusOutstanding)
        -let secu = secusOutstanding[key]
        .shelfRegistrationContainer
            .registrationTableRow
                div Name: 
                div #{secu["security_name"]}
            .registrationTableRow
                div Type: 
                div #{secu["security_type"]}
            .registrationTableRow
                div Amount: 
                div #{secu["amount"]}
            .registrationTableRow
                div Data From: 
                div #{secu["instant"]}

mixin securityOutstandingChart(chartId, chartData, chartName)
    -let parentContainerId = chartName+"parentContainer"
    -let chartDataVar = chartData
    div.d-flex-c.ml-1.mr-1
        span(id=chartName).chartTitle.mr-2.ml-1.mt-2.cur-d #{chartName}
        div(id=parentContainerId).chartContainer.mb-1.ml-1.mr-1.mt-1 
            canvas(id=chartId).canvasChart
    script.
        let ctx = document.getElementById(!{JSON.stringify(chartId)})
        let chart = new Chart(ctx, createOSChartconfig(!{JSON.stringify(chartDataVar)}))
        makeContainerToggleable(!{JSON.stringify(chartName)}, !{JSON.stringify(parentContainerId)})

block content 
    //- must inlcude: ticker, company_name, sector, industry, mktcap, float
    //- could include: company_description
    -let company = company_info //thead = "ticker header" object
    -let filingsObject = filings // obj of {category: [filings]} for secFilingTables
    -let cashInfo = cash_info
    -let burnInfo = cashBurnInfo
    -let shelfsObject = shelfsTabContent
    -let outstanding = securitiesOutstanding

    script(src="/public/scripts/switchTabs.js")
    script(src="/public/scripts/dropdownContainer.js")
    
    div.belowNavbarWrapper
        div#headerContainer.ml-1.mr-1.w-100
            .d-flex-r  
                h4#tickerHeader.ticker.mt-2.mb-1.opacity-8  #{company.symbol}
            .d-flex-r 
                h2#companyNameHeader.companyName.mt-1.mb-1 #{company.name}
            .d-flex-r
                .d-flex-c
                    #sicInfo.mr-2.d-flex-r
                        div.d-inline-block.mr-2
                            span.headerInfo.mr-1.opacity-8 Sector:
                            span.headerInfo #{company.sector}
                        div.d-inline-block
                            span.headerInfo.mr-1.opacity-8 Industry:
                            span.headerInfo #{company.industry}
                    //- #sharesInfo.mt-2.mr-2
                    //-     div.d-inline-block.mr-2
                    //-         span.mr-1.opacity-8 Mkt Cap: 
                    //-         span #{company.mktcap}
                    //-     div.d-inline-block.mr-2
                    //-         span.mr-1.opacity-8 Float:
                    //-         span #{company.float}
                    #companyDescription.mt-1.mr-2
                        div.opacity-8.ch80 #{company.description}
            .tabContainer.d-flex-r.mt-3.max-w-95vw.hide-scrollbar
                .selectionTab.cur-p.activeSelectionTab(onClick="openTab(event, 'dilution')") Dilution
                .selectionTab.cur-p(onClick="openTab(event, 'filings')") Filings 
                //- .selectionTab.cur-p(onClick="openTab(event, 'securities_outstanding')") Securities Outstanding 
                .selectionTab.cur-p(onClick="openTab(event, 'shelfs')") Shelfs
            
            //- maybe include the tabs as separat pug files
            //- on certain conditions so i can first load a dummy site
            //- until all the data is ready, if this gives improved
            //- user experience


    #dilution.tabContent.activeTab
        script(src="https://cdn.jsdelivr.net/npm/chart.js")
        script(src="/public/scripts/chartUtil.js")
        +securityOutstandingChart("outstandingCommonStockChart", outstandingShares, "Common Stock Outstanding TEST")
        .d-flex-c.ml-1.mr-1
            span.chartTitle.mr-2.ml-1.mt-2.cur-d Outstanding Common Shares
            div.chartContainer.mb-1.ml-1.mr-1.mt-1
                canvas#outstandingSharesChart.canvasChart
        .d-flex-c.mt-1.ml-1.mr-1
            span.chartTitle.mr-2.ml-1.mt-1.cur-d Net cash and equivalents
            if (burnInfo)
                if (burnInfo["days_of_cash"] < 0)
                    span.chartDescription.mr-2.ml-1.mt-1.mb-1.ch80.cur-d Should have run out of cash <strong>#{burnInfo["days_of_cash"]}</strong> Days ago. Based on a cash burn of: <strong>#{burnInfo["burn_rate"]}$</strong>/Day and last recorded net cash of: <strong>#{burnInfo["net_cash"]}$</strong>, based on data from #{burnInfo["burn_rate_date"]} and #{burnInfo["net_cash_date"]} respectivly. Estimated Tracking error in net cash of at least: #{burnInfo["cash_missing"]}.
                else
                    if burnInfo["days_of_cash"] == "Infinity" 
                        span.chartDescription.mr-2.ml-1.mt-1.mb-1.ch80.cur-d Should not run out of cash. Based on a cash gain of: <strong>#{burnInfo["burn_rate"]}$</strong>/Day and last recorded net cash of: <strong>#{burnInfo["net_cash"]}$</strong>, based on data from #{burnInfo["burn_rate_date"]} and #{burnInfo["net_cash_date"]} respectivly.
                    else 
                        span.chartDescription.mr-2.ml-1.mt-1.mb-1.ch80.cur-d Should run out of cash in <strong>#{burnInfo["days_of_cash"]}</strong> Days. Based on a cash burn of: <strong>#{burnInfo["burn_rate"]}$</strong>/Day and last recorded net cash of: <strong>#{burnInfo["net_cash"]}$</strong>, based on data from #{burnInfo["burn_rate_date"]} and #{burnInfo["net_cash_date"]} respectivly.
            else
                span.chartDescription.mr-2.ml-1.mt-1.mb-1.cur-d information on cash burn is missing for this company.
            div.chartContainer.mb-1.ml-1.mr-1.mt-1.mb-1
                canvas#cashPositionChart.canvasChart

        //- script(src="/public/scripts/chartUtil.js")
        - let outstanding_shares_data = outstandingShares
        - let cash_position_data = cashPosition
        script.
            let ctxOS = document.getElementById('outstandingSharesChart')
            let chartOS = new Chart(ctxOS, createOSChartconfig(!{JSON.stringify(outstanding_shares_data)}))
            let ctxCP = document.getElementById("cashPositionChart")
            let chartCP = new Chart(ctxCP, createCPChartconfig(!{JSON.stringify(cash_position_data)}))

        .d-flex-c


    #filings.tabContent.inactiveTab
        #filingTablesWrapper
            each key in Object.keys(filingsObject)
                - let numRows = 0

                    div.filingTableWrapper
                        div.filingTableTitle #{key}
                        div.filingTableBodyWrapper
                        
                            .filingTableHeaderRow
                                .filingHeaderItem Form 
                                .filingHeaderItem Description
                                .filingHeaderItem Filing Date
                            each filing in filingsObject[key]
                                    if numRows > 10
                                        - break
                                    else
                                        +filingTableRow(filing[0], filing[1], filing[2], filing[3])
                                        - numRows = numRows + 1
    
    #shelfs.tabContent.inactiveTab
        if (shelfObject != undefined)
            .tabBackgroundWrapper
                each shelf_key in Object.keys(shelfsObject)
                    - let shelf = shelfsObject[shelf_key]["shelf"]
                    - let offerings = shelfsObject[shelf_key]["offerings"]
                    .registrationContainerBodyWrapper
                        +shelfRegistrationContainer(shelf, offerings)
                        if (shelf["related_filings"] != undefined)
                            .containerPartingLine
                            +filingParseStatusContainer(shelf["related_filings"])
                        if (offerings != [] && offerings != undefined)
                            .containerPartingLine
                            +offeringsContainer(offerings)
        else
            div.transitionPadding
            .flexCenterWrapperColumn
                .tickerNotFoundBox
                    div
                        span No parsed or filed Shelf Registrations (S-3) are present for this Ticker.

    //- #securities_outstanding.tabContent.inactiveTab
    //-     .tabBackgroundWrapper
    //-         if (outstanding)
    //-             +secusOutstanding(outstanding)


    script(src="/public/scripts/filingDescriptionTooltip.js")
    script(src="/public/scripts/rowHover.js")
            //- create dict with {category: [{individual_filing},...]}
            //- mixin panel with max items
    
        
            
                



        
